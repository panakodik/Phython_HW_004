# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. 
# m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.

# def common_elements(n, m):
#     set1 = set()
#     set2 = set()

#     print("Введите элементы первого множества:")
#     for i in range(n):
#         element = int(input())
#         set1.add(element)

#     print("Введите элементы второго множества:")
#     for i in range(m):
#         element = int(input())
#         set2.add(element)

#     common_elements = []
#     for element in set1:
#         if element in set2:
#             common_elements.append(element)

#     common_elements.sort()

#     print("Общие элементы, отсортированные в порядке возрастания:")
#     for element in common_elements:
#         print(element)

# n = int(input("Введите количество элементов первого множества: "))
# m = int(input("Введите количество элементов второго множества: "))

# common_elements(n, m)



# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное 
# число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать 
# за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.


def max_berries(a):
    N = len(a)
    if N == 0:
        return 0
    if N == 1:
        return a[0]
    if N == 2:
        return max(a[0], a[1])
    
    dp = [0] * N
    dp[0] = a[0]
    dp[1] = a[1]
    
    for i in range(2, N):
        dp[i] = max(dp[i-2] + a[i], dp[i-1])
    
    return max(dp)

a = [3, 6, 5, 1, 8]
result = max_berries(a)
print(result)